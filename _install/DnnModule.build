<project name="Build installable zip of DNN module" default="build">

  <!--//AK
				Version: 1.5.2
				Date: 2010-05-31
				Assumptions:
				- The directory where the nAnt script is located (install.dir) is a subdirectory of
					the root of the DNN module Visual Studio project (base.dir)
				- The template file DnnModuleManifest.dnn exists in install.dir
				- The major, minor and build part of the assembly version is the DNN module version
				- The major, minor and build part of the DotNetNuke.dll assembly version is the DotNetNuke version
	   -->

  <!--//AK	Fill this property if you want to update your development environment with an install zip file-->

  <property name="dnn.root" value="D:\Develop\Bureau Erkenningen\Erkenningen\wwwroot\" />

  <property name="module.folder" value="AOCRaad.Erkenningen.VakkenBeheer" />

  <!--//AK	Fill the value of these properties only if you want to overrule the default dynamic values. -->
  <property name="module.name.overrule" value="VakkenBeheer"/>
  <property name="nant.settings.currentframework" value="net-4.0"/>
  <property name="assembly.name.overrule" value=""/>
  <property name="assembly.version.overrule" value=""/>
  <property name="dnn.version.overrule" value="5.04.01"/>
  <property name="bin.dir.overrule" value="" />
  <property name="deploy.subdir" value="tempoutput" />

  <!--//AK  Main sequence of steps PRODUCTION -->
  <!--<target name="build" depends="initialize,copy.files,createmanifest,zip,DNNdevelopXCOPY,zip,clean" ></target>-->

  <!--//AK  Main sequence of steps TEST -->
  <target name="build" depends="initialize,copy.files,createmanifest,DNNdevelopXCOPY,clean" ></target>







  <!-- Initialize all the necesary parameters -->
  <target name="initialize">

    <!--AK	Get current directory and its parent as base directory. -->
    <property name="install.dir" value="${directory::get-current-directory()}" />
    <property name="base.dir" value="${directory::get-parent-directory(install.dir)}" />
    <property name="deploy.dir" value="${install.dir}\${deploy.subdir}" />

    <!--AK	Get a reference to the manifest template file. -->
    <property name="manifest.full" value="${install.dir}\DnnModuleManifest.dnn" />
    <if test="${false == file::exists(property::get-value('manifest.full'))}">
      <fail message="File DnnModuleManifest.dnn does not exist." />
    </if>

    <!--AK	Get a reference to Visual Studio project file. -->
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="../*.vbproj" />
          <include name="../*.csproj" />
        </items>
      </in>
      <do>
        <property name="vsproject.full" value="${filename}" />
      </do>
    </foreach>

    <!--AK	Get the name of the assembly. -->
    <property name="assembly.name" value="${assembly.name.overrule}"/>
    <!--AK	Check if the value must be overruled. -->
    <if test="${assembly.name == ''}">
      <!--AK Read the assembly name from de VS project xml file -->
      <xmlpeek
                file="${vsproject.full}"
                xpath="/x:Project/x:PropertyGroup/x:AssemblyName"
                property="assembly.name">
        <namespaces>
          <namespace prefix="x" uri="http://schemas.microsoft.com/developer/msbuild/2003" />
        </namespaces>
      </xmlpeek>
    </if>

    <!--AK	Get the path to the bin dir. -->
    <property name="bin.dir" value="${bin.dir.overrule}"/>
    <!--AK	Check if the value must be overruled. -->
    <if test="${bin.dir == ''}">
      <!--AK Read the bin dir location from de VS project xml file -->
      <xmlpeek
                file="${vsproject.full}"
                xpath="/x:Project/x:PropertyGroup[contains(@Condition,'Release|')=true]/x:OutputPath"
                property="bin.dir">
        <namespaces>
          <namespace prefix="x" uri="http://schemas.microsoft.com/developer/msbuild/2003" />
        </namespaces>
      </xmlpeek>
      <if test="${string::ends-with(bin.dir,'\')}" >
        <property name="bin.dir" value="${string::substring(bin.dir,0,string::get-length(bin.dir)-1)}"/>
      </if>
      <if test="${string::ends-with(bin.dir,'/')}" >
        <property name="bin.dir" value="${string::substring(bin.dir,0,string::get-length(bin.dir)-1)}"/>
      </if>
      <property name="bin.dir" value="${'..\' + bin.dir}"/>
    </if>

    <!--AK Get the full path to the compiled assemlby dll. -->
    <property name="assembly.full" value="${bin.dir}\${assembly.name}.dll" />
    <if test="${false == file::exists(assembly.full)}">
      <fail message="Assembly ${assembly.full} does not exist." />
    </if>

    <!--AK	Get the name of the DNN module. -->
    <property name="module.name" value="${module.name.overrule}"/>
    <!--AK	Check if the value must be overruled. -->
    <if test="${module.name == ''}">
      <!--AK Assume the DNN module name is the same as the base directory name. -->
      <property name="module.name" value="${path::get-file-name(base.dir)}"/>
    </if>


    <!--AK Get the DNN version -->
    <property name="dnn.version" value="${dnn.version.overrule}" />
    <if test="${dnn.version == ''}">

      <!--AK Read the DNN assembly version from de VS project xml file -->
      <xmlpeek
                file="${vsproject.full}"
                xpath="/x:Project/x:ItemGroup/x:Reference[substring(@Include,1,10)='DotNetNuke']/@Include"
                property="dnn.version">
        <namespaces>
          <namespace prefix="x" uri="http://schemas.microsoft.com/developer/msbuild/2003" />
        </namespaces>
      </xmlpeek>

      <property name="temp.index.1" value="${string::index-of(dnn.version, 'Version=')}"/>

      <!--AK Version is in the xml node -->
      <if test="${int::parse(temp.index.1) > -1}">
        <property name="temp.index.1" value="${8 + int::parse(temp.index.1)}"/>
        <property name="temp.index.2" value="${string::index-of(string::substring(dnn.version, temp.index.1, 15),',')}"/>
        <property name="temp.index.2" value="${int::parse(temp.index.2)}"/>
        <property name="dnn.version" value="${string::substring(dnn.version, temp.index.1, temp.index.2)}"/>
      </if>

      <!--AK Version is NOT in the xml node -->
      <if test="${int::parse(temp.index.1) == -1}">

        <property name="dnn.dir.full" value="" />
        <property name="dnn.version" value="00.00.00" />

        <!--AK Read the location of the DotNetNuke.dll from the VS file -->
        <xmlpeek
                    file="${vsproject.full}"
                    xpath="/x:Project/x:ItemGroup/x:Reference[@Include='DotNetNuke']/x:HintPath"
                    property="dnn.dir.full">
          <namespaces>
            <namespace prefix="x" uri="http://schemas.microsoft.com/developer/msbuild/2003" />
          </namespaces>
        </xmlpeek>
        <!--<property name="dnn.dir.full" value="'..\' + ${dnn.dir.full}" />-->

        <echo message="${'dnn.dir.full: ' + dnn.dir.full}" />

        <!--AK Read the version from the DotNetNuke.dll file directly -->
        <if test="${file::exists(dnn.dir.full)}">
          <property name="dnn.version.major" value="${version::get-major(assemblyname::get-version(assemblyname::get-assembly-name(dnn.dir.full)))}" />
          <property name="dnn.version.major" value="${string::pad-left(dnn.version.major,2,'0')}" />
          <property name="dnn.version.minor" value="${version::get-minor(assemblyname::get-version(assemblyname::get-assembly-name(dnn.dir.full)))}" />
          <property name="dnn.version.minor" value="${string::pad-left(dnn.version.minor,2,'0')}" />
          <property name="dnn.version.build" value="${version::get-build(assemblyname::get-version(assemblyname::get-assembly-name(dnn.dir.full)))}" />
          <property name="dnn.version.build" value="${string::pad-left(dnn.version.build,2,'0')}" />
          <property name="dnn.version" value="${dnn.version.major}.${dnn.version.minor}.${dnn.version.build}" />
        </if>

      </if>

    </if>


    <!--AK Get the assembly version and format it to 00.00.00 DNN version format. -->
    <property name="assembly.version" value="${assembly.version.overrule}" />
    <if test="${assembly.version == ''}">
      <property name="assembly.version.major" value="${version::get-major(assemblyname::get-version(assemblyname::get-assembly-name(property::get-value('assembly.full'))))}" />
      <property name="assembly.version.major" value="${string::pad-left(property::get-value('assembly.version.major'),2,'0')}" />
      <property name="assembly.version.minor" value="${version::get-minor(assemblyname::get-version(assemblyname::get-assembly-name(property::get-value('assembly.full'))))}" />
      <property name="assembly.version.minor" value="${string::pad-left(property::get-value('assembly.version.minor'),2,'0')}" />

      <property name="assembly.version.build" value="${version::get-build(assemblyname::get-version(assemblyname::get-assembly-name(property::get-value('assembly.full'))))}" />
      <property name="assembly.version.build" value="${string::pad-left(property::get-value('assembly.version.build'),2,'0')}" />

      <property name="assembly.version" value="${assembly.version.major}.${assembly.version.minor}.${assembly.version.build}" />
    </if>

  </target>

  <!-- Copy all the necessary files to an intermediate 'deploy' directory -->
  <target name="copy.files" depends="initialize">

    <delete dir="${deploy.dir}" failonerror="true" />

    <!-- Create "deploy" directory -->
    <mkdir dir="${deploy.dir}" />

    <!-- Copy required files -->
    <copy todir="${deploy.dir}">

      <fileset>
        <include name="../*.ascx" />
        <include name="../*.css" />
        <include name="../*.js" />
        <include name="../bin/*.dll" />
        <include name="../dist/**" />

        <include name="${assembly.full}" />

        <exclude name="../bin/DotNetNuke.dll" />
        <exclude name="../.idea/**" />
        <exclude name="../dist/*.html" />
        <exclude name="../dist/*.txt" />
        <exclude name="../dist/*.ico" />
        <exclude name="../node_modules/**" />
        <exclude name="../src/**" />
        <exclude name="../e2e/**" />
        <exclude name="../.angular-cli.json" />
        <exclude name="../.editorconfig" />
        <exclude name="../.gitignore" />
        <exclude name="../.node-version" />
        <exclude name="../.prettierignore" />
        <exclude name="../.prettierrc" />
        <exclude name="../before-nant.js" />
        <exclude name="../cypress.json" />
        <exclude name="../karma.conf.js" />
        <exclude name="../package-lock.json" />
        <exclude name="../package.json" />
        <exclude name="../protractor.conf.js" />
        <exclude name="../proxy.config.*" />
        <exclude name="../README.md" />
        <exclude name="../run-nant.bat" />
        <exclude name="../tsconfig.json" />
        <exclude name="../tslint.json" />
        <exclude name="VakkenBeheer.ascx" />
        <exclude name="../wallaby.js" />
        <exclude name="../bin/Microsoft.ApplicationBlocks.Data.dll" />
        <exclude name="../bin/AjaxControlToolkit.dll" />
        <exclude name="../*/Telerik.Web.UI.dll" />
        <exclude name="../*/ClientDependency.Core.dll" />
        <exclude name="../*/DotNetNuke.Instrumentation.dll" />
        <exclude name="../*/dotnetnuke.log4net.dll" />
        <exclude name="../*/DotNetNuke.Web.Client.dll" />
        <exclude name="../*/Microsoft.Web.Infrastructure.dll" />
        <exclude name="../*/Newtonsoft.Json.dll" />
        <exclude name="../*/System.Web.Razor.dll" />
        <exclude name="../*/System.Web.WebPages.Deployment.dll" />
        <exclude name="../*/System.Web.WebPages.dll" />
        <exclude name="../*.config" />
      </fileset>

    </copy>

    <!-- Copy .ascx controls in subdirectory 'desktopmodules' to main directory-->
    <copy todir="${deploy.dir}" flatten="true">

      <fileset>
        <include name="../desktopmodules/**/*.ascx" />
      </fileset>

    </copy>


    <!-- Copy extra subdirectories with content -->
    <foreach item="Folder" property="foldername" >

      <in>
        <items basedir="../">
          <include name="*" />
          <exclude name="_**" />
          
          <exclude name="**/src/**" />
          <exclude name="**/dist/**" />
          <exclude name="**/.vscode/**" />
          <exclude name="**/.idea/**" />
          <exclude name="**/.tmp/**" />
          <exclude name="**/_install/**" />
          <exclude name="**/cypress/**" />
          <exclude name="**/e2e/**" />
          <exclude name="**/mocks/**" />
          <exclude name="**/node_modules/**" />
          <exclude name="**/bin/**" />
          <exclude name="**/obj/**" />
          <exclude name="**/doc/**" />
          <exclude name="**/components/**" />
          <exclude name="**/my project/**" />
          <exclude name="**/app_data/**" />
          <exclude name="**/backup/**" />
          <exclude name="**/old/**" />
          <exclude name="**/temp/**" />
          <exclude name="**/desktopmodules/**" />
            
          <exclude name=".angular-cli.json" />
          <exclude name=".editorconfig" />
          <exclude name=".gitignore" />
          <exclude name=".node-version" />
          <exclude name=".prettierignore" />
          <exclude name=".prettierrc" />
          <exclude name="before-nant.js" />
          <exclude name="cypress.json" />
          <exclude name="karma.conf.js" />
          <exclude name="package-lock.json" />
          <exclude name="package.json" />
          <exclude name="npm-debug.log" />
          <exclude name="protractor.conf.js" />
          <exclude name="proxy.config.*" />
          <exclude name="README.md" />
          <exclude name="run-nant.bat" />
          <exclude name="tsconfig.json" />
          <exclude name="tslint.json" />
          <exclude name="VakkenBeheer-template.ascx" />
          <exclude name="VakkenBeheer.ascx" />
          <exclude name="wallaby.js" />
        </items>
      </in>

      <do>

        <property name="subdir" value="${path::get-file-name(foldername)}" />
        <property name="subdirrelative" value="${string::replace(foldername, base.dir, '')}" />
         
        <!-- Copy the files of the subdirs in all levels -->
        <copy todir="${deploy.dir}/${subdirrelative}" includeemptydirs="true" flatten="false">
          <fileset basedir="../${subdirrelative}" defaultexcludes="true" >
            <include name="*.*" />
            <exclude name="*.zip" />
            <exclude name="*.dnn" />
            <exclude name="*.cs" />
            <exclude name="*.vb" />
            <exclude name="*.sln" />
            <exclude name="*.suo" />
            <exclude name="*.vbproj" />
            <exclude name="*.csproj" />
            <exclude name="*.webinfo" />
            <exclude name="*.user" />
            <exclude name="*.xsx" />
            <exclude name="*.build" />
            <exclude name="*.fxcop" />
            <exclude name="*.pdb" />
            <exclude name="*.rsp" />
            <exclude name="*.scc" />
            <exclude name="*.vspscc" />
            <exclude name="*.dll" />
            <exclude name="*.config" />
            <exclude name="cypress/**" />
            <exclude name="e2e/**" />
            <exclude name="mocks/**" />
            <exclude name="node_modules/**" />
            <exclude name=".angular-cli.json" />
            <exclude name=".editorconfig" />
            <exclude name=".gitignore" />
            <exclude name=".node-version" />
            <exclude name=".prettierignore" />
            <exclude name=".prettierrc" />
             <exclude name=".vscode" />
            <exclude name="before-nant.js" />
            <exclude name="cypress.json" />
            <exclude name="karma.conf.js" />
            <exclude name="package-lock.json" />
            <exclude name="package.json" />
            <exclude name="protractor.conf.js" />
            <exclude name="proxy.config.*" />
            <exclude name="README.md" />
            <exclude name="run-nant.bat" />
            <exclude name="tsconfig.json" />
            <exclude name="tslint.json" />
            <exclude name="VakkenBeheer-template.ascx" />
            <exclude name="wallaby.js" />
            <exclude name="npm-debug.log" />

          </fileset>
        </copy>

      </do>

    </foreach>

    <property name="expected.output" value="${deploy.dir}\${assembly.name}.dll"/>
    <fail unless="${file::exists(expected.output)}">Output file ${assembly.name}.dll doesn't exist in deploy directory</fail>

  </target>

  <!-- Create manifest file -->
  <target name="createmanifest">
    <script language="VB" mainclass="CreateManifest">
      <code>
        <![CDATA[
Public Class CreateManifest

    Shared Sub ScriptMain(ByVal project As NAnt.Core.Project)
        Dim pd As PropertyDictionary = project.Properties
        Dim strTemplate As String
        Dim strTemplateFileName As String
        Dim strOutput As String
        Dim strFiles As String = ""
        Dim strFileTemplate As String = "<file>{1}<name>{0}</name></file>"
        Dim strDirTemplate As String = "<path>{0}</path>"
        Dim strDeployDir As String
        Dim strInstallDir As String
        Dim parentPath As String
        Dim parentPath2 As String
        Dim parentPath3 As String
        Dim file As System.IO.FileInfo
        Dim deployDir As System.IO.DirectoryInfo
        Dim subDir As System.IO.DirectoryInfo
        Dim file2 As System.IO.FileInfo
        Dim subDir2 As System.IO.DirectoryInfo
        Dim file3 As System.IO.FileInfo
        Dim subDir3 As System.IO.DirectoryInfo
        Dim fileOutput As System.IO.FileInfo
        Dim fp As System.IO.StreamWriter

        strInstallDir = pd("install.dir")
        strDeployDir = pd("deploy.dir")
        deployDir = New System.IO.DirectoryInfo(strDeployDir)

        strTemplateFileName = strInstallDir & "\" & "DnnModuleManifest.dnn"

        Dim templateFile As New System.IO.StreamReader(strTemplateFileName)
        strTemplate = templateFile.ReadToEnd

        parentPath = ""
        For Each file In deployDir.GetFiles

            strFiles &= String.Format(strFileTemplate, file.Name, parentPath)
            strFiles &= Microsoft.VisualBasic.Strings.Chr(13) & Microsoft.VisualBasic.Strings.Chr(10)

        Next

        For Each subDir In deployDir.GetDirectories

            parentPath = subDir.Name
            For Each file In subDir.GetFiles

                strFiles &= String.Format(strFileTemplate, file.Name, String.Format(strDirTemplate, parentPath))
                strFiles &= Microsoft.VisualBasic.Strings.Chr(13) & Microsoft.VisualBasic.Strings.Chr(10)

            Next

            For Each subDir2 In subDir.GetDirectories

                parentPath2 =  parentPath & "\" & subDir2.Name
                For Each file2 In subDir2.GetFiles

                    strFiles &= String.Format(strFileTemplate, file2.Name, String.Format(strDirTemplate, parentPath2))
                    strFiles &= Microsoft.VisualBasic.Strings.Chr(13) & Microsoft.VisualBasic.Strings.Chr(10)

                Next

                For Each subDir3 In subDir2.GetDirectories

                    parentPath3 = parentPath2 & "\" & subDir3.Name
                    For Each file3 In subDir3.GetFiles

                        strFiles &= String.Format(strFileTemplate, file3.Name, String.Format(strDirTemplate, parentPath3))
                        strFiles &= Microsoft.VisualBasic.Strings.Chr(13) & Microsoft.VisualBasic.Strings.Chr(10)

                    Next

                Next

            Next

        Next

        strOutput = strTemplate.Replace("{files}", strFiles)
        strOutput = strOutput.Replace("{ModuleName}", pd("module.name"))
        strOutput = strOutput.Replace("{ModuleVersion}", pd("assembly.version"))

        fileOutput = New System.IO.FileInfo(strDeployDir & "\" & pd("module.name") & ".dnn")

        fp = fileOutput.CreateText()
        fp.Write(strOutput)
        fp.Close()

    End Sub

End Class
]]>
      </code>
    </script>

    <property name="expected.output" value="${deploy.dir}\${module.name}.dnn"/>
    <fail unless="${file::exists(expected.output)}">Manifest file '${deploy.dir}\${module.name}.dnn' is not created.</fail>

  </target>

  <!-- Zip the output to a DNN private assembly -->
  <target name="zip">
    <property name="expected.output" value="${module.name}_${assembly.version}_DNN_${dnn.version}.zip"/>

    <zip zipfile="${expected.output}">
      <fileset basedir="${deploy.dir}">
        <include name="**" />
        <exclude name="*.zip" />
        <exclude name="*.build" />
        <exclude name="DnnModuleManifest.dnn" />
      </fileset>
    </zip>

    <fail unless="${file::exists(expected.output)}">Zip file ${expected.output} was not created</fail>

  </target>

  <!--AK Place a DNN Private Assembly zip file with extension .resources in the update directory of the development DNN site -->
  <target name="DNNdevelop">
    <if test="${dnn.root != ''}">
      <copy file="${expected.output}" tofile="${dnn.root}\install\module\${path::get-file-name-without-extension(expected.output)}.resources" overwrite="true">
      </copy>
    </if>

  </target>

  <!--AK Copy all the necessary files directly to a DNN development site. -->
  <target name="DNNdevelopXCOPY">

    <if test="${dnn.root != ''}">

      <copy todir="${dnn.root}/bin" overwrite="true" flatten="false">
        <fileset basedir="../bin">
          <include name="ExportPanel.dll" />
          <include name="AOCRaad*.dll" />
          <include name="AOCRaad*.pdb" />
          <include name="AOCRaad.Keurmerken.Domain.*" />
          <include name="AOCRaad.Keurmerken.Model.*" />

        </fileset>
      </copy>

      <copy todir="${dnn.root}/desktopmodules/${module.folder}" overwrite="true" flatten="false">
        <fileset basedir="${deploy.dir}">
          <include name="**.*" />
          <exclude name="**.dll" />
          <exclude name="*.resx" />
        </fileset>
      </copy>

    </if>

  </target>

  <!-- Remove the temporary deploy directory -->
  <target name="clean">
    <delete dir="${deploy.dir}" failonerror="false" />
  </target>

</project>
